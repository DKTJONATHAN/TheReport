---
import Layout from '../../layouts/Layout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

// Define types for better type safety
type Post = CollectionEntry<'posts'>;

// Helper function to safely extract tags with comprehensive validation
function safeGetTags(post: Post): string[] {
  try {
    const tags = post.data?.tags;
    
    // Handle null/undefined
    if (!tags) return [];
    
    // Handle array of tags
    if (Array.isArray(tags)) {
      return tags
        .filter((tag): tag is string => {
          return typeof tag === 'string' && tag.trim().length > 0;
        })
        .map(tag => tag.trim());
    }
    
    // Handle single string tag
    if (typeof tags === 'string') {
      const trimmed = tags.trim();
      return trimmed.length > 0 ? [trimmed] : [];
    }
    
    // Handle comma-separated string
    if (typeof tags === 'string' && tags.includes(',')) {
      return tags
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);
    }
    
    return [];
  } catch (error) {
    console.warn('Error extracting tags from post:', post.slug, error);
    return [];
  }
}

// Helper function to create URL-safe slugs
function createSlug(text: string): string {
  return text
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '') // Remove special characters except hyphens
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

// Helper function to safely get category
function safeGetCategory(post: Post): string {
  try {
    const category = post.data?.category;
    if (typeof category === 'string' && category.trim().length > 0) {
      return category.trim();
    }
    return 'Uncategorized';
  } catch (error) {
    console.warn('Error extracting category from post:', post.slug, error);
    return 'Uncategorized';
  }
}

export async function getStaticPaths() {
  try {
    // Get all posts with error handling
    const allPosts = await getCollection('posts');
    
    if (!Array.isArray(allPosts) || allPosts.length === 0) {
      console.warn('No posts found or posts is not an array');
      return [];
    }

    // Extract all unique tags safely
    const allTags = new Set<string>();
    const allCategories = new Set<string>();
    
    for (const post of allPosts) {
      // Add tags
      const tags = safeGetTags(post);
      tags.forEach(tag => allTags.add(tag));
      
      // Add categories
      const category = safeGetCategory(post);
      allCategories.add(category);
    }

    // Convert to arrays and create slugs
    const tagArray = Array.from(allTags);
    const categoryArray = Array.from(allCategories);
    
    // Create paths for each tag
    const paths = tagArray.map(tag => {
      const tagSlug = createSlug(tag);
      
      // Skip if slug is empty
      if (!tagSlug) {
        console.warn('Empty slug generated for tag:', tag);
        return null;
      }
      
      // Check if this tag slug conflicts with any category slug
      const categorySlug = categoryArray
        .map(cat => createSlug(cat))
        .find(slug => slug === tagSlug);
      
      return {
        params: { 
          tag: tagSlug 
        },
        props: { 
          originalTag: tag,
          tagSlug,
          conflictsWithCategory: !!categorySlug,
          categoryRedirect: categorySlug ? `/category/${categorySlug}` : null
        }
      };
    }).filter((path): path is NonNullable<typeof path> => path !== null);

    console.log(`Generated ${paths.length} tag paths from ${tagArray.length} unique tags`);
    return paths;
    
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// Get props from Astro
const { originalTag, tagSlug, conflictsWithCategory, categoryRedirect } = Astro.props;

// Validate required props
if (!originalTag || !tagSlug) {
  console.error('Missing required props:', { originalTag, tagSlug });
  return Astro.redirect('/404');
}

// Redirect if tag conflicts with category
if (conflictsWithCategory && categoryRedirect) {
  return Astro.redirect(categoryRedirect);
}

// Get all posts and filter by current tag
let filteredPosts: Post[] = [];
let allCategories: string[] = [];

try {
  const allPosts = await getCollection('posts');
  
  // Filter posts that have the current tag
  filteredPosts = allPosts
    .filter(post => {
      const postTags = safeGetTags(post);
      const postTagSlugs = postTags.map(tag => createSlug(tag));
      return postTagSlugs.includes(tagSlug);
    })
    .sort((a, b) => {
      const dateA = a.data?.date ? new Date(a.data.date).getTime() : 0;
      const dateB = b.data?.date ? new Date(b.data.date).getTime() : 0;
      return dateB - dateA; // Most recent first
    });

  // Get all categories for navigation
  allCategories = Array.from(new Set(
    allPosts.map(post => safeGetCategory(post))
  )).sort();

} catch (error) {
  console.error('Error loading posts:', error);
  return Astro.redirect('/404');
}

// Redirect to 404 if no posts found
if (filteredPosts.length === 0) {
  console.warn(`No posts found for tag: ${originalTag}`);
  return Astro.redirect('/404');
}

// SEO and meta data
const pageTitle = `${originalTag} News & Articles`;
const pageDescription = `Discover the latest ${originalTag} news, articles, and updates from Kenya. Stay informed with comprehensive coverage and insights.`;
const canonicalUrl = `https://www.jonathanmwaniki.co.ke/tags/${tagSlug}`;

// Schema.org data
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": "https://www.jonathanmwaniki.co.ke"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Tags",
      "item": "https://www.jonathanmwaniki.co.ke/tags"
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": `${originalTag} News`,
      "item": canonicalUrl
    }
  ]
};

const collectionSchema = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": pageTitle,
  "description": pageDescription,
  "url": canonicalUrl,
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": filteredPosts.length,
    "itemListElement": filteredPosts.map((post, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "NewsArticle",
        "headline": post.data?.title || 'Untitled',
        "description": post.data?.description || '',
        "datePublished": post.data?.date?.toISOString() || new Date().toISOString(),
        "author": {
          "@type": "Person",
          "name": "Jonathan Mwaniki"
        },
        "url": `https://www.jonathanmwaniki.co.ke/posts/${post.slug}`
      }
    }))
  }
};
---

<Layout
  title={pageTitle}
  description={pageDescription}
  canonical={canonicalUrl}
  image="https://www.jonathanmwaniki.co.ke/default-og-image.jpg"
  meta={[
    { name: 'og:title', content: pageTitle },
    { name: 'og:description', content: pageDescription },
    { name: 'og:type', content: 'website' },
    { name: 'og:url', content: canonicalUrl },
    { name: 'og:image', content: 'https://www.jonathanmwaniki.co.ke/default-og-image.jpg' },
    { name: 'og:site_name', content: 'Jonathan Mwaniki' },
    { name: 'twitter:card', content: 'summary_large_image' },
    { name: 'twitter:title', content: pageTitle },
    { name: 'twitter:description', content: pageDescription },
    { name: 'twitter:image', content: 'https://www.jonathanmwaniki.co.ke/default-og-image.jpg' },
    { name: 'keywords', content: `${originalTag}, Kenya news, ${originalTag} articles, breaking news` },
    { name: 'robots', content: 'index, follow' },
  ]}
>
  <!-- JSON-LD Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)}></script>
  <script type="application/ld+json" set:html={JSON.stringify(collectionSchema)}></script>

  <main class="container">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="Breadcrumb" class="breadcrumb">
      <ol>
        <li><a href="/">Home</a></li>
        <li><a href="/tags">Tags</a></li>
        <li aria-current="page">{originalTag}</li>
      </ol>
    </nav>

    <!-- Page Header -->
    <header class="page-header">
      <h1>{originalTag} News & Articles</h1>
      <p class="subtitle">
        Explore {filteredPosts.length} article{filteredPosts.length !== 1 ? 's' : ''} 
        tagged with "{originalTag}"
      </p>
    </header>

    <!-- Category Navigation -->
    <nav class="category-nav" aria-label="Categories">
      <h2 class="nav-title">Explore Categories</h2>
      <ul class="category-list">
        {allCategories.map(category => (
          <li>
            <a 
              href={`/category/${createSlug(category)}`}
              class="category-link"
              title={`Browse ${category} articles`}
            >
              {category}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- Posts Grid -->
    <section class="posts-section" aria-label="Articles">
      <h2 class="section-title">Latest Articles</h2>
      <div class="posts-grid">
        {filteredPosts.map(post => {
          const title = post.data?.title || 'Untitled';
          const description = post.data?.description || 'No description available';
          const category = safeGetCategory(post);
          const date = post.data?.date || new Date();
          const categorySlug = createSlug(category);
          
          return (
            <article class="post-card">
              <header class="post-header">
                <h3 class="post-title">
                  <a href={`/posts/${post.slug}`} title={`Read: ${title}`}>
                    {title}
                  </a>
                </h3>
              </header>
              
              <div class="post-content">
                <p class="post-description">{description}</p>
              </div>
              
              <footer class="post-meta">
                <span class="post-category">
                  <a 
                    href={`/category/${categorySlug}`}
                    title={`Browse ${category} articles`}
                  >
                    {category}
                  </a>
                </span>
                <time 
                  class="post-date"
                  datetime={date.toISOString()}
                  title={`Published on ${date.toLocaleDateString()}`}
                >
                  {date.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </time>
              </footer>
            </article>
          );
        })}
      </div>
    </section>

    <!-- Back Navigation -->
    <nav class="back-nav">
      <a href="/tags" class="back-link">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
        View All Tags
      </a>
      <a href="/" class="back-link">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
          <polyline points="9,22 9,12 15,12 15,22"></polyline>
        </svg>
        Back to Home
      </a>
    </nav>
  </main>

  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
      line-height: 1.6;
    }

    /* Breadcrumb */
    .breadcrumb {
      margin-bottom: 2rem;
    }

    .breadcrumb ol {
      list-style: none;
      padding: 0;
      display: flex;
      gap: 0.5rem;
      align-items: center;
      background: #f8f9fa;
      padding: 0.75rem 1rem;
      border-radius: 8px;
      font-size: 0.9rem;
    }

    .breadcrumb li::after {
      content: '→';
      margin-left: 0.5rem;
      color: #666;
    }

    .breadcrumb li:last-child::after {
      display: none;
    }

    .breadcrumb a {
      color: #dc2626;
      text-decoration: none;
      font-weight: 500;
    }

    .breadcrumb a:hover {
      text-decoration: underline;
    }

    /* Page Header */
    .page-header {
      text-align: center;
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 2px solid #e5e7eb;
    }

    .page-header h1 {
      font-size: clamp(2rem, 5vw, 3rem);
      color: #1f2937;
      margin-bottom: 0.5rem;
      font-weight: 700;
    }

    .subtitle {
      font-size: 1.125rem;
      color: #6b7280;
      margin: 0;
    }

    /* Category Navigation */
    .category-nav {
      margin-bottom: 3rem;
    }

    .nav-title {
      font-size: 1.25rem;
      color: #374151;
      margin-bottom: 1rem;
      font-weight: 600;
    }

    .category-list {
      list-style: none;
      padding: 0;
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .category-link {
      display: inline-block;
      padding: 0.5rem 1rem;
      background: #dc2626;
      color: white;
      text-decoration: none;
      border-radius: 50px;
      font-size: 0.875rem;
      font-weight: 600;
      transition: all 0.2s ease;
    }

    .category-link:hover {
      background: #b91c1c;
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(220, 38, 38, 0.3);
    }

    /* Posts Section */
    .posts-section {
      margin-bottom: 3rem;
    }

    .section-title {
      font-size: 1.5rem;
      color: #1f2937;
      margin-bottom: 2rem;
      font-weight: 600;
    }

    .posts-grid {
      display: grid;
      gap: 2rem;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    }

    /* Post Cards */
    .post-card {
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 12px;
      padding: 1.5rem;
      transition: all 0.3s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .post-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      border-color: #dc2626;
    }

    .post-title {
      margin: 0 0 1rem 0;
      font-size: 1.25rem;
      line-height: 1.3;
    }

    .post-title a {
      color: #1f2937;
      text-decoration: none;
      font-weight: 600;
    }

    .post-title a:hover {
      color: #dc2626;
    }

    .post-description {
      color: #4b5563;
      margin: 0 0 1.5rem 0;
      font-size: 0.95rem;
    }

    .post-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 1rem;
      border-top: 1px solid #f3f4f6;
      font-size: 0.875rem;
    }

    .post-category a {
      color: #dc2626;
      text-decoration: none;
      font-weight: 600;
    }

    .post-category a:hover {
      text-decoration: underline;
    }

    .post-date {
      color: #6b7280;
    }

    /* Back Navigation */
    .back-nav {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid #e5e7eb;
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: white;
      border: 2px solid #dc2626;
      color: #dc2626;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 600;
      transition: all 0.2s ease;
    }

    .back-link:hover {
      background: #dc2626;
      color: white;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }

      .posts-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }

      .breadcrumb ol {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
      }

      .breadcrumb li::after {
        content: '↓';
      }

      .back-nav {
        flex-direction: column;
        align-items: center;
      }

      .category-list {
        justify-content: center;
      }
    }

    /* Focus Styles for Accessibility */
    a:focus,
    button:focus {
      outline: 2px solid #dc2626;
      outline-offset: 2px;
    }

    /* Print Styles */
    @media print {
      .category-nav,
      .back-nav {
        display: none;
      }
      
      .post-card {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #ccc;
      }
    }
  </style>
</Layout>